package com.javarush.cryptoanalyzer.ostapenko;

import com.javarush.cryptoanalyzer.ostapenko.app.Application;

public class CryptoAnalyzer {
    public static void main(String[] args) {
        Application.launch(Application.class, args);
    }
}
//TODO вынести все в константы
//TODO Дописать документацию
//TODO доделать проверку ошибок(расширив список ошибок). Например на путь к файлу и прочему, напрямую использовать эти утилитарные классы во вью. расширения файла, одинаковые пути. Пустые файла и т.п.
//TODO Алфавит убрать как enum константу, так как в этом виде его тяжело расширять. Сделать один файл, где отдельные константы вроде русских букв разных регистров + цифрв и из этого проще потом модифицировать программу будет.
//TODO В случае guicontroller передавать туда View на уровне aplication как и сейчас  и на этапе инициализации сразу превращать ее в GUIView и с ней везде работать без небоходимости в instanceof
//TODO В случае когда нужно что-то менять в качестве результата во view там можно сделать что-то наподобии тоже пачки команд и нужна их расшифровка на стороне GUI
//TODO в контроллере нужно сделать один универсальный метод передачи вызоава run, при всех нажатиях кнопок в guiview.
// Для этого в guiview универсальный метод который принимает кнопку e, считывае ее getid и на основании этих даннынх определяет какому объекту нужно в setaction передать этот run
// В getparamtrs сделать метод который принимает кнопку e, считывае ее getid и это значение передает в 0 параметр, как команду. Вместо того, чтобы как сейчас через кучу if делать.
//TODO В статическом анализе добавить метод наибольших квадратов, так как видимо без него все работает кривовато при текущем определении и сопоставления частотности.
//TODO добавить режим демонстрации в gui интерфейс, когда заранее есть готовые пути к файлам
//TODO Вместо лога сделать запись ошибок куда-то в файл?
//TODO GUIVIEW убедиться, разделить на методы init component, actionlistener component, и в конце уже вызов сцены с ее параметрами.
//TODO сам guiview можно дополнительно для удобства разделить по логическим блокам или по окнам(вроде окно для одного шифра, окно для другого и тп.?)
// При необходимости можно выделить event в отдельный класс если их много,если не много то event можно и сами кнопки отрисовку в одном классе оставлять.

